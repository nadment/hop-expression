ExpressionException.InternalError=Internal error {0}
ExpressionException.FieldNotFound=Field not found {0}
ExpressionException.SyntaxError=Syntax error at position {1}: {0}
ExpressionException.InvalidNumberOfArguments=Syntax error, invalid number of arguments: {0}
ExpressionException.MissingRightParenthesis=Syntax error, missing right parenthesis at position {1} : {0}
ExpressionException.MissingEndSingleQuotedString=Syntax error, missing end of single-quotes string at position {1} : {0}
ExpressionException.MissingEndDoubleQuotedString=Syntax error, missing end of double-quotes string at position {1} : {0}
ExpressionException.UnbalancedParenthesis=Syntax error, unbalanced parenthesis at position {1} : {0}
ExpressionException.InvalidBetween=Syntax error, invalid between operator at position {1} : {0}
ExpressionException.InvalidCaseWhen=Syntax error, invalid case when operator at position {1} : {0}
ExpressionException.InvalidExpressionList=Syntax error, invalid list with comma
ExpressionException.UnsupportedConversion=Unsupported conversion of value {1} to type {0}

Category.Math=Mathematical

################################################################################
# Operator
################################################################################

Add.Syntax=<numeric_expression> + <numeric_expression>
Add.Help=Sum of 2 numeric values.
Divide.Syntax=<numeric_expression> / <numeric_expression>
Divide.Help=Divide 2 numeric values.
Multiply.Syntax=<numeric_expression> * <numeric_expression>
Multiply.Help=Multiply 2 numeric values.
Exponent.Syntax=<numeric_expression> ** <numeric_expression>
Exponent.Help=Calculates a number to the nth power, for example 2^6 resolves to 64.
In.Help=
In.Syntax=<field> [NOT] IN (<expression> [,<expression> ,...])
Is.Help=
Is.Syntax=IS [ NOT ] NULL\nIS [ NOT ] TRUE\nIS [ NOT ] FALSE
Like.Syntax=<string> [NOT] LIKE <pattern>
Like.Help=Returns true if <str> matches <pattern>, null if any arguments are null, false otherwise.
LogicalAnd.Help=Matches both expression.
LogicalAnd.Syntax=<boolean_expression> AND <boolean_expression>
LogicalOr.Help=Matches either expression.
LogicalOr.Syntax=<boolean_expression> OR <boolean_expression>
Not.Help=Does not match the expression.
Not.Syntax=NOT <boolean_expression>
Subtract.Syntax=<numeric_expression> - <numeric_expression>
Subtract.Help=Subtract of 2 numeric values.

################################################################################
# Math functions
################################################################################
Abs.Help=Returns the absolute (positive) value of the numeric value.
Abs.Syntax={0}(<numeric_expression>)
Ceil.Help=Returns the value rounded to the nearest equal or larger integer.
Ceil.Syntax={0}(<numeric_expression>)
Cos.Help=Returns the trigonometric cosine of the specified angle in radians in the specified number.
Cos.Syntax={0}(<float_expression>)
Acos.Help=Returns the arc cosine, the angle in radians whose cosine is the specified float expression.
Acos.Syntax={0}(<float_expression>)
Cot.Help=Returns the trigonometric cotangent of the angle in radians specified by <float_expression>.
Cot.Syntax={0}(<float_expression>)
Floor.Help=Returns the values rounded to the nearest equal or smaller integer.
Floor.Syntax={0}(<numeric_expression>)
Pi.Help=Returns the constant value of pi.
Pi.Syntax={0}()
Round.Help=Returns the values rounded to the nearest integer.
Round.Syntax={0}(<numeric_expression>)
Sin.Help=Returns the trigonometric sine of the angle in radians.
Sin.Syntax={0}(<float_expression>)
Tan.Help=Returns the tangent of the input expression.
Tan.Syntax={0}(<float_expression>)

################################################################################
# String functions
################################################################################
Ascii.Help=Returns the ASCII value of the first character in a string. If the string is empty, a value of 0 is returned.
Ascii.Syntax={0}(<string>)
Ascii.Category=Math
Coalesce.Help=Returns the first of its arguments that is not null.\nNull is returned only if all arguments are null.
Coalesce.Syntax={0}(<expression>, <expression>...)
Concat.Help=Returns the result of concatenation of two or more string. The || operator provides alternative syntax for CONCAT.
Concat.Syntax={0}(<string>, <string>[, <string>...])\n<string> || <string>
EqualsNull.Help=Compares whether two expressions are equal. The function is NULL-safe, meaning it treats NULLs as known values for comparing equality. Note that this is different from the EQUAL comparison operator (=), which treats NULLs as unknown values.
EqualsNull.Syntax={0}(<expr>,<expr>)
Greatest.Help=Returns the greatest value in a list of expressions
Greatest.Syntax={0}(<expression>[, <expression>...] )
Instr.Help=Returns the position in the string that is the first character of a specified occurrence of the substring (A nonzero INTEGER when the search is successful or 0 (zero) when it is not). 
Instr.Syntax={0}(<string>, <pattern>)
InitCap.Help=Returns a string with the first letter of each word in uppercase and the subsequent letters in lowercase.
InitCap.Syntax={0}(<string>)
Left.Help=Extracts a number of characters from a string (starting from left).
Left.Syntax={0}(<string>, <length>)
Len.Help=Returns the number of characters of the specified string.
Len.Syntax={0}(<string>)
LPad.Help=Left-pads a string with another string, to a certain length.
LPad.Syntax={0}(<string>, <length> [, <pad_string>])
Lower.Help=Returns a character string converted to lower case
Lower.Syntax={0}(<string>)
Upper.Help=Returns a character string converted to upper case
Upper.Syntax={0}(<string>)
NullIf.Help=Returns null if <expression1> equals to <expression2>, or <expression1> otherwise.
NullIf.Syntax={0}(<expression1>, <expression2>) 
Right.Help=Extracts a number of characters from a string (starting from right).
Right.Syntax={0}(<string>, <length>)
Substr.Help=Returns the portion of the string from <string>, starting from the character/byte specified by <start>, with optionally limited <length>.
Substr.Syntax={0}(<string>, <start>[, length])
StartsWith.Help=Returns TRUE if the first expression starts with second expression.\nBoth expressions must be text.
StartsWith.Syntax={0}(<string>,<string>)
EndsWith.Help=Returns TRUE if the first expression ends with second expression.\nBoth expressions must be text.
EndsWith.Syntax={0}(<string>,<string>)
Replace.Help=Removes all occurrences of a specified substring, and optionally replaces them with another string.
Replace.Syntax={0}(<string>, <pattern> [, <replacement>])
RPad.Help=Right-pads a string with another string, to a certain length.
RPad.Syntax={0}(<string>, <length> [, <pad_string>])
Trim.Help=Returns the character string with leading and trailing blanks removed.
Trim.Syntax={0}(<string>)
LTrim.Help= Returns the character string with leading blanks removed.
LTrim.Syntax={0}(<string>)
RTrim.Help=Returns the character string with trailing blanks removed.
RTrim.Syntax={0}(<string>)
Reverse.Help=Reverses the order of characters in a string.
Reverse.Syntax={0}(<string>)

################################################################################
# Date functions
################################################################################
CurrentDate.Help=Returns the current date value.
CurrentDate.Syntax={0}()
Year.Help=Returns the integer that specifies the year of the specified date/timestamp.
Year.Syntax={0}(<date_or_timestamp>)
Month.Help= Returns the month component of the date/timestamp.
Month.Syntax={0}(<date_or_timestamp>)
Quarter.Help=Quarter of the year (number in the range 1 to 4)
Quarter.Syntax={0}(<date_or_timestamp>)
Day.Help=Returns the day of month of the date/timestamp.
Day.Syntax={0}(<date_or_timestamp>)
DayOfMonth.Help=Returns the day of month of the date/timestamp (The result is an integer between 1 and 31).
DayOfMonth.Syntax={0}(<date_or_timestamp>)
DayOfYear.Help=Returns the day of year of the date/timestamp (The result is an integer between 1 and 366).
DayOfYear.Syntax={0}(<date_or_timestamp>)
DayOfWeek.Help=Returns the day of week of the date/timestamp (The result is an integer between 1 and 7).
DayOfWeek.Syntax={0}(<date_or_timestamp>)
Hour.Help=Returns the hour component of the timestamp (The result is an integer between 0 and 23).
Hour.Syntax={0}(<timestamp>)
Minute.Help=Returns the minute component of the timestamp (The result is an integer between 0 and 59).
Minute.Syntax={0}(<timestamp>)
Second.Help=Returns the second component of the timestamp (The result is an integer between 0 and 59).
Second.Syntax={0}(<timestamp>)
